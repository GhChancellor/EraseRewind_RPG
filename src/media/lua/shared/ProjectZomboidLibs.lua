---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 12/02/23 10:20
--- V002

---@class ProjectZomboidLibs

require("media.lua.shared.DbgLeleLib")
require("media.lua.shared.objects.CharacterObj")

---Get Character Traits Perk
---@param character IsoGameCharacter
---@return CharacterObj table - PerkFactory.Perk perk, int level
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function getCharacterTraitsPerk(character)

    ---@type CharacterObj
    local CharacterObj01 = CharacterObj:new()

    local traits_PZ = getTraitsPerk_PZ(character)

    for i = 0, traits_PZ:size() - 1 do

        ---@type TraitFactory.Trait
        local trait = TraitFactory.getTrait(traits_PZ:get(i) )

        local recipes = trait:getFreeRecipes()

        for i2 = 0, recipes:size() - 1 do
            local recipe = recipes:get(i2)
            CharacterObj01:addRecipe(recipe)
        end

        CharacterObj01:addTrait( trait:getType() )

        ---@type TraitFactory.Trait
        local traitMap = trait:getXPBoostMap()

        ---@type KahluaTable
        local traitKahluaTable = transformIntoKahluaTable(traitMap)

        for perk, level in pairs(traitKahluaTable) do
            CharacterObj01:addPerkDetails(perk, level:intValue(), nil)
        end
    end

    return CharacterObj01
end

---Get Character Profession
---@param character IsoGameCharacter
---@return CharacterObj getPerkDetails() -- table PerkFactory.Perk perk, int level, float xp
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function getCharacterProfession(character)
    ---@type CharacterObj
    local CharacterObj01 = CharacterObj:new()

    ---@type SurvivorDesc
    local characterProfession_PZ = getCharacterProfession_PZ(character)

    ---@type ProfessionFactory
    local professionMap = ProfessionFactory.getProfession(characterProfession_PZ):getXPBoostMap()

    ---@type KahluaTable
    local professionKahluaTable = transformIntoKahluaTable(professionMap)

    for perk, level in pairs(professionKahluaTable) do
        CharacterObj01:addPerkDetails(perk, level:intValue(), nil)
    end

    return CharacterObj01
end

---Get character and get current skill/trait
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@return PerkDetailsObj getPerkDetailsObj()
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
function getCharacterCurrentSkill(character, perk)
    -- Perks.Maintenance
    -- Perks.Woodwork
    -- Perks.Sprinting
    if not character then
        return nil
    end

    ---@type CharacterObj
    local CharacterObj01 = CharacterObj:new()

    ---@type SurvivorDesc
    local profession = getCharacterProfession_PZ(character)

    ---@type PerkFactory
    local perk_ = getPerk_PZ(perk)

    ---@type int
    local level = getPerkLevel_PZ(character, perk_)

    ---@type double
    local xp = getXpPerk_PZ(character, perk_)

    CharacterObj01:currentCharacter(profession, perk_, level:intValue(), xp)

    return CharacterObj01
end

---Get character and get All skills/traits
---@param character IsoGameCharacter
---@return CharacterObj getPerkDetails() -- table PerkFactory.Perk perk, int level, float xp
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function getCharacterAllSkills(character)
    if not character then
        return nil
    end

    ---@type CharacterObj
    local CharacterObj01 = CharacterObj:new()

    for i = 0, Perks.getMaxIndex() - 1 do

        ---@type PerkFactory.Perks
        local perk = getPerk_PZ(Perks.fromIndex(i))

        ---@type int
        local level = getPerkLevel_PZ(character, perk)

        ---@type double
        local xp = getXpPerk_PZ(character, perk)
        -- Add to objects
        CharacterObj01:addPerkDetails(perk, level, xp)
    end

    CharacterObj01:setProfession( getCharacterProfession_PZ(character) )

    return CharacterObj01
end

--- -------------------------------------------------

--- Get Perk
---@param perk PerkFactory
---@return PerkFactory.Perk perk
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
function getPerk_PZ(perk)
    return PerkFactory.getPerk(perk)
end

--- Get Perk from name
---@param perk String
---@return PerkFactory.Perk perk
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
function getPerkFromName_PZ(perk)
    return PerkFactory.getPerkFromName(perk)
end

---Add XP
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@param xp float
---@param flag1 boolean default false
---@param flag2 boolean default false
---@param flag3 boolean default true
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
--- - IsoGameCharacter.XP : zombie.characters.IsoGameCharacter.XP
function addXP_PZ(character, perk, xp, flag1, flag2, flag3)
    if not character or not perk then
        return nil
    end

    flag1 = flag1 or false -- is the default
    flag2 = flag2 or false -- is the default
    flag3 = flag3 or true -- is the default

    character:getXp():AddXP(perk, xp, flag1, flag2, flag3);
end

---@param value double
---@return int
function trunkFloatTo2Decimal(value)
    return tonumber(string.format("%.2f", value)) + 0.0
end

--- Get Perk Level
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@return int
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
function getPerkLevel_PZ(character, perk)
    if not character then
        return nil
    end

    return character:getPerkLevel(perk)
end

--- Get all Traits and Perk
---@param character IsoGameCharacter
---@return TraitCollection
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - TraitCollection : zombie.characters.traits.TraitCollection
function getTraitsPerk_PZ(character)
    if not character then
        return nil
    end

    return character:getTraits()
end

--- Get Character Traits
---@param character IsoGameCharacter
---@return IsoGameCharacter.CharacterTraits
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - IsoGameCharacter.CharacterTraits : zombie.characters.IsoGameCharacter.CharacterTraits
function getCharacterTraits_PZ(character)
    if not character then
        return nil
    end

    return character:getCharacterTraits()
end


--- Get Charater profession
---@param character IsoGameCharacter
---@param profession String
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - SurvivorDesc : zombie.characters.SurvivorDesc
function setCharacterProfession_PZ(character, profession)
    if not character then
        return nil
    end

    character:getDescriptor():setProfession(profession)
end

--- Get Character profession
---@param character IsoGameCharacter
---@return String
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - SurvivorDesc : zombie.characters.SurvivorDesc
function getCharacterProfession_PZ(character)
    if not character then
        return nil
    end

    return character:getDescriptor():getProfession()
end

--- Get XP perk
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@return float xp
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
--- - IsoGameCharacter.XP : zombie.characters.IsoGameCharacter.XP
function getXpPerk_PZ(character, perk)
    return trunkFloatTo2Decimal( character:getXp():getXP(perk) ) -- Perks.Maintenance
end

EnumNumbers = {
    ZERO = 0,
    ONE = 1,
    TWO = 2,
    THREE = 3,
    FOUR = 4,
    FIVE = 5,
    SIX = 6,
    SEVEN = 7,
    EIGHT = 8,
    NINE = 9,
    TEN = 10,
}

--- Convert Level To Xp
---@param level int
---@param perk PerkFactory.Perk
---@return float Xp
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
function convertLevelToXp(perk, level)
    -- Perks.Sprinting:getXp1()
    local result

    if not perk or not level then
        return nil
    end

    if level == EnumNumbers.ONE then
        result = getPerk_PZ(perk):getXp1()
    elseif level == EnumNumbers.TWO then
        result = getPerk_PZ(perk):getXp2()
    elseif level == EnumNumbers.THREE then
        result = getPerk_PZ(perk):getXp3()
    elseif level == EnumNumbers.FOUR then
        result = getPerk_PZ(perk):getXp4()
    elseif level == EnumNumbers.FIVE then
        result = getPerk_PZ(perk):getXp5()
    elseif level == EnumNumbers.SIX then
        result = getPerk_PZ(perk):getXp6()
    elseif level == EnumNumbers.SEVEN then
        result = getPerk_PZ(perk):getXp7()
    elseif level == EnumNumbers.EIGHT then
        result = getPerk_PZ(perk):getXp8()
    elseif level == EnumNumbers.NINE then
        result = getPerk_PZ(perk):getXp9()
    elseif level == EnumNumbers.TEN then
        result = getPerk_PZ(perk):getXp10()
    end

    return result
end

---Set Perk Level and level
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@param xp float
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
--- - IsoGameCharacter.XP : zombie.characters.IsoGameCharacter.XP
function setPerkLevel(character, perk, xp)
    if not character or not perk then
        return nil
    end

    if xp == 0 then
        return
    end

    addXP_PZ(character, perk, xp,
            false, false, true )

end

---Set Perk Level and level
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
--- ISPlayerStatsUI.lua 635
--- - IsoGameCharacter : zombie.characters.IsoGameCharact
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
--- - IsoGameCharacter.XP : zombie.characters.IsoGameCharacter.XP
function removePerkLevel(character, perk)
    if not character or not perk then
        return nil
    end

    ---@type int
    local currentLevelPerk = getPerkLevel_PZ(character, perk)

    for _ = 0, currentLevelPerk  do
        character:LoseLevel(perk)
    end

    ---@type float
    local xpPerk = getXpPerk_PZ(character, perk)
    xpPerk = -xpPerk

    if xpPerk == 0 then
        return
    end

    addXP_PZ(character, perk, xpPerk,
            false, false, true )

end

---Get Parent_PZ
---@param perk PerkFactory.Perk
---@return String
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
function getParent_PZ(perk)
    return perk:getParent():getName()
end

---Set Zombies Killed
---@param character IsoGameCharacter
---@param killZombies int
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function setZombieKills_PZ(character, killZombies)
    if not character then
        return nil
    end

    character:setZombieKills(killZombies)
end

---Get Zombies Killed
---@param character IsoGameCharacter
---return int
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function getZombieKills_PZ(character)
    if not character then
        return nil
    end

    return character:getZombieKills()
end

---Set Life Time in hours
---@param lifeTime double
--- - IsoPlayer : zombie.characters.IsoPlayer
function setHoursSurvived_PZ(lifeTime)
    if not lifeTime then
        return nil
    end

    IsoPlayer.getInstance():setHoursSurvived(lifeTime)
end

---Get Life Time in hours
---@return double
--- - IsoPlayer : zombie.characters.IsoPlayer
function getHoursSurvived_PZ()
    return IsoPlayer.getInstance():getHoursSurvived()
end

---Set Weight
---@param value double
--- - IsoPlayer : zombie.characters.BodyDamage.Nutrition
function setWeight_PZ(value)
    if not value then
        return nil
    end

    IsoPlayer.getInstance():getNutrition():setWeight(value)
end

---Get Weight
---@return double Weight
--- - IsoPlayer : zombie.characters.BodyDamage.Nutrition
function getWeight_PZ()
    return IsoPlayer.getInstance():getNutrition():getWeight()
end

---Set Calories
---@param value float
--- - IsoPlayer : zombie.characters.BodyDamage.Nutrition
function setCalories_PZ(value)
    if not value then
        return nil
    end

    IsoPlayer.getInstance():getNutrition():setCalories(value)
end

---Get Calories
---@return float Calories
--- - IsoPlayer : zombie.characters.BodyDamage.Nutrition
function getCalories_PZ()
    return IsoPlayer.getInstance():getNutrition():getCalories()
end

---Insert Single Value Into Mod Data
---@param EnumModData
---@param value
--- - ModData : zombie.world.moddata.ModData
function modDataInsertSingleValue(modData, value)
    if not modData or not value then
        return nil
    end

    ModData.remove(modData)

    local lines = {}
    table.insert(lines, value)

    ModData.add(modData, lines)
end

---Read Single Value Into Mod Data
---@param EnumModData
--- - ModData : zombie.world.moddata.ModData
function modDataReadSingleValue(modData)
    if not modData then
        return nil
    end

    local lines = {}

    lines = ModData.get(modData)
    return lines[1]
end

---Insert Multiple Value Into Mod Data
---@param modData EnumModData
---@param values table
--- - ModData : zombie.world.moddata.ModData
function modDataInsertMultipleValue(modData, values)
    if not modData or not values then
        return nil
    end

    local lines = {}

    for i, v in pairs(values) do
        lines[i] = v
        ModData.add(modData, lines)
    end
end

---Is Exist
---@param modData EnumModData
--- - ModData : zombie.world.moddata.ModDa
function modDataIsExist(modData)
    return ModData.exists(modData)
end

---@param character IsoGameCharacter
---@return ArrayList
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function getKnownRecipes_PZ(character)
    if not character then
        return nil
    end

    return character:getKnownRecipes()
end

---@param character IsoGameCharacter
---@param nameRecipe String
---@return boolean
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function learnRecipe_PZ(character, nameRecipe)
    if not character or not nameRecipe then
        return nil
    end

    return character:learnRecipe(nameRecipe)
end

---Set Trait
---@param character IsoGameCharacter
---@param trait String
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - TraitCollection.TraitSlot : zombie.characters.traits.TraitCollection.TraitSlot
function setTrait_PZ(character, trait)
    if not character or not trait then
        return nil
    end

    character:getTraits():add(trait)
end

---Remove Trait
---@param character IsoGameCharacter
---@param trait String
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - TraitCollection.TraitSlot : zombie.characters.traits.TraitCollection.TraitSlot
function removeTrait_PZ(character, trait)
    if not character or not trait then
        return nil
    end

    character:getTraits():remove(trait)
end

---Clear all Traits
---@param character IsoGameCharacter
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - TraitCollection.TraitSlot : zombie.characters.traits.TraitCollection.TraitSlot
function removeAllTraits_PZ(character)
    if not character then
        return nil
    end

    character:getTraits():clear()
end

---Get Multiplier
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@return float
--- - IsoGameCharacter : zombie.characters.IsoGameCharact
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
function getMultiplier_PZ(character, perk)
    if not character or not perk then
        return nil
    end

    return character:getXp():getMultiplier(perk)
end

---Add Xp Multiplier
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@param value1 float
---@param value2 int
---@param value3 int
--- - IsoGameCharacter : zombie.characters.IsoGameCharact
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
function addXpMultiplier_PZ(character, perk, value1, value2, value3)
    if not character or not perk or not
    value1 or not value2 or not
    value3 then

        return nil
    end

    character:getXp():addXpMultiplier(perk, value1, value2, value3)

    --[[
    The addXpMultiplier() function is a method of the Xp class in the Project Zomboid Lua API.
    It adds a multiplier to the XP gain of a specific perk for a set period of time.

    The parameters of the function are:

    perk (string): The name of the perk to apply the XP multiplier to.
    value1 (float): The multiplier value to apply to the XP gain of the specified perk.
    value2 (int, optional): The number of in-game minutes to apply the multiplier for. If not specified, the multiplier
    will be applied indefinitely until removed.
    value3 (boolean, optional): Whether to override existing multipliers for the specified perk. Defaults to false.
    Here's an example of how to use the function:

    css
    Copy code
    character:getXp():addXpMultiplier("Farming", 2.0, 60, true)
    This would apply a 2x multiplier to the XP gain of the Farming perk for 60 in-game minutes,
    and override any existing multipliers for that perk.
    ]]
end

---Set PerkBoost 1 - 75%, 2 - 100%, 3 - 125%, default 0 ?? - 50%
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
---@param levelBoost int
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
function setPerkBoost_PZ(character, perk, levelBoost)
    -- Perks.Cooking
    if not character or not perk or not levelBoost then
        return nil
    end

    character:getXp():setPerkBoost(perk, levelBoost)
end

---Get Perk Boost
---@param character IsoGameCharacter
---@param perk PerkFactory.Perk
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
--- - PerkFactory.Perk : zombie.characters.skills.PerkFactory
function getPerkBoost_PZ(character, perk)
    -- Perks.Cooking
    if not character or not perk then
        return nil
    end

    return character:getXp():getPerkBoost(perk)
end
