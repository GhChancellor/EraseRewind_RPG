---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 07/10/23 12:34
---

---@class ScheduledBookRead

local ScheduledBookRead = {}

-- TODO : da spostare il percorso al interno della libreria
local activityCalendar = require("debug/ActivityCalendar")
local characterManagement = require("CharacterManagement")
local pageBook = require("PageBook")
local modDataManager = require("lib/ModDataManager")

--- **Scheduled Book Read From Hd**
---@return table double ( dateInSecond )
local function scheduledBookReadFromHd()
    return modDataManager.read(pageBook.Character.SCHEDULED_BOOK_READ)
end

--- **Delete Character**
---@return void
local function deleteCharacter()
    characterManagement.removeMoData()
end

--- **Read Book**
---@param character IsoGameCharacter
---@return void
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function ScheduledBookRead.readBook(character)
    if not modDataManager.isExists(pageBook.Character.SCHEDULED_BOOK_READ) then
        return nil
    end

    characterManagement.readBook(character)
end

--- **Write Book To Hd**
---@param character IsoGameCharacter
---@param minimunDaysBeforeWriteBook int
---@return void
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function ScheduledBookRead.writeBook(character, minimunDaysBeforeWriteBook)
    -- TODO : DBG - delete it!!
    minimunDaysBeforeWriteBook = 1

    ---@type boolean
    local flag = false

    ---@type table - double
    local dateInSecond

    --- **Check if scheduledBookRead is exits**
    if not modDataManager.isExists(
            pageBook.Character.SCHEDULED_BOOK_READ) then

        --- **Set Waiting Days**
        activityCalendar.setWaitingOfDays(minimunDaysBeforeWriteBook)

        --- **Get Expected Date In Seconds**
        dateInSecond = activityCalendar.getExpectedDateInSecond()

        flag = true
    else
        --- **Retrieve the date when it is possible to write a book**
        ---@type table - double
        local scheduledBookRead = scheduledBookReadFromHd()

        --- check if scheduledBookRead is nil
        if not scheduledBookRead then return nil end

        dateInSecond = scheduledBookRead[1]

        -- **Set scheduled BookRead**
        activityCalendar.setExpectedDateInSecond(dateInSecond)

        --- **Check if date is expected**
        if activityCalendar.isExpectedDate() then
            deleteCharacter()
            flag = true
        end
    end

    --- **Check if I can write the book**
    if flag then
        --- **Save mod data scheduled BookRead date**
        modDataManager.save(pageBook.Character.SCHEDULED_BOOK_READ, dateInSecond)

        --- **Write Book**
        characterManagement.writeBook(character)
    end

    flag = false
end

return ScheduledBookRead

--local function funcName()
--    ---@type table - double
--    local dateInSecond
--
--    --- **Check if scheduledBookRead is exits**
--    if not modDataManager.isExists(
--            pageBook.Character.SCHEDULED_BOOK_READ) then
--
--        --- **Set Waiting Days**
--        activityCalendar.setWaitingOfDays(1)
--
--        --- **Save mod data scheduled BookRead date**
--        modDataManager.save(pageBook.Character.SCHEDULED_BOOK_READ, dateInSecond)
--
--        --- **Write Book**
--        characterManagement.writeBook(character)
--        return
--    else
--        --- **Retrieve the date when it is possible to write a book**
--        ---@type table - double
--        local scheduledBookRead = scheduledBookReadFromHd()
--
--        --- check if scheduledBookRead is nil
--        if not scheduledBookRead then return nil end
--
--        deleteCharacter()
--
--        dateInSecond = scheduledBookRead[1]
--
--        -- **Set scheduled BookRead**
--        activityCalendar.setExpectedDateInSecond(dateInSecond)
--    end
--    -- Todo : Aggiungere il controllo della data prima di poter riscrivere il libro
--
--    --- **Save mod data scheduled BookRead date**
--    modDataManager.save(pageBook.Character.SCHEDULED_BOOK_READ, dateInSecond)
--
--    --- **Write Book**
--    characterManagement.writeBook(character)
--end