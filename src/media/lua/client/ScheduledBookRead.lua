---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by lele.
--- DateTime: 07/10/23 12:34
---

---@class ScheduledBookRead

local ScheduledBookRead = {}

-- TODO : da spostare il percorso al interno della libreria
local activityCalendar = require("lib/ActivityCalendar")
local characterManagement = require("CharacterManagement")
local errHandler = require("lib/ErrHandler")
local pageBook = require("PageBook")
local modDataManager = require("lib/ModDataManager")

-- TODO : collegare alla sandbox
local minimunDaysBeforeWriteBook = 5

--- **Scheduled Book Read From Hd**
---@return table double ( dateInSecond )
local function scheduledBookReadFromHd()
    return modDataManager.read(pageBook.Character.SCHEDULED_BOOK_READ)
end

--- **Delete Character**
---@return void
local function deleteCharacter()
    characterManagement.removeMoData()
end

--- **Read Book**
---@param character IsoGameCharacter
---@return void
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function ScheduledBookRead.readBook(character)
    if not modDataManager.isExists(pageBook.Character.SCHEDULED_BOOK_READ) then
        return nil
    end

    characterManagement.readBook(character)
end

--- **Write Book To Hd**
---@param character IsoGameCharacter
---@param minimunDaysBeforeWriteBook int
---@return void
--- - IsoGameCharacter : zombie.characters.IsoGameCharacter
function ScheduledBookRead.writeBook(character)
    --- **Check if character is nil**
    if not character then
        errHandler.errMsg("ScheduledBookRead.writeBook(character)",
                errHandler.err.IS_NULL_CHARACTER)
        return nil
    end

    ---@type boolean
    local flag = false

    ---@type boolean
    local dateInSecond = 0

    --- **Check if scheduledBookRead is exits**
    if not modDataManager.isExists(
            pageBook.Character.SCHEDULED_BOOK_READ) then

        --- **Set Waiting Days**
        activityCalendar.setWaitingOfDays(minimunDaysBeforeWriteBook)

        --- **Get Expected Date In Seconds**
        dateInSecond = activityCalendar.getExpectedDateInSecond()
        flag = true
    else
        --- **Retrieve the date when it is possible to write a book**
        ---@type table - double
        local scheduledBookRead = scheduledBookReadFromHd()

        --- check if scheduledBookRead is nil
        if not scheduledBookRead then return nil end

        dateInSecond = scheduledBookRead[1]

        -- **Set scheduled BookRead**
        activityCalendar.setExpectedDateInSecond(dateInSecond)

        --- **Check if date is expected**
        if activityCalendar.isExpectedDate() then
            deleteCharacter()
            flag = true
        end
    end

    --- **Check if I can write the book**
    if flag then
        local lines = {}
        table.insert(lines, dateInSecond)

        --- **Save scheduled BookRead date to mod data**
        modDataManager.save(pageBook.Character.SCHEDULED_BOOK_READ, lines)

        --- **Write Book**
        characterManagement.writeBook(character)
    end

    return flag
end

return ScheduledBookRead